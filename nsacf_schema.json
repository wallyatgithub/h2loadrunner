{
  "$schema":"http://json-schema.org/draft-04/schema#",
  "description":" NSACF configuration",
  "title":"NSACF_configuration",
  "type":"object",
  "properties":{
    "address":{
      "description":"IP address",
      "default": "0.0.0.0",
      "type":"string"
    },
    "port":{
      "description":"port, 80, 443 ,etc.",
      "default": 80,
      "type":"integer"
    },
    "udsf-url":{
      "description":"USDF URL, e.g., http://127.0.0.1:8081/nudsf-dr/v1",
      "type":"string"
    },
    "minimum-egress-concurrent-connections":{
      "description":"NSACF can establish more than one concurrent connection to UDSF for better throughput; This field specifies the minimum number of concurrent connections to UDSF; if all the connections are blocked (max concurrent stream reached), further more connections will be opened",
      "default": 5,
      "type":"integer"
    },
    "max-number-of-ues":{
      "description":"max number of registered UEs allowed for a network slice",
      "default": 2000,
      "type":"integer"
    },
    "threads":{
      "description":"Number of concurrent worker threads. If 0 is given: thead number matches number of cores",
      "default": 1,
      "type":"integer"
    },
    "private-key-file":{
      "description":"path to private key file in PEM format",
      "type":"string"
    },
    "cert-file":{
      "description":"path to cert file in PEM format",
      "type":"string"
    },
    "caCert-file":{
      "description":"path to CA cert file in PEM format for client certificate verification, this is used when mTLS is enabled",
      "type":"string"
    },
    "ciphers": {
      "description": "Set allowed cipher list. The format of the string is described in OpenSSL ciphers(1)",
      "type": "string",
      "default": "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256"
    },
    "mTLS":{
        "description": "true: enable mTLS, request and verify client certificate; false: do not request client certificate",
        "default": false,
        "type":"boolean"
    },
    "max-concurrent-streams":{
      "description":"Value of SETTINGS_MAX_CONCURRENT_STREAMS in setting frame, or max concurrent streams allowed in each egress connection; default: 2048",
      "default": 2048,
      "type":"integer"
    },
    "header-table-size":
    {
      "description":"Specify decoder header table size.",
      "default": 4096,
      "type":"integer"
    },
    "encoder-header-table-size":
    {
      "description":"Specify encoder header table size. The decoder (server) specifies the maximum dynamic table size it accepts. Then the negotiated dynamic table size is the minimum of this option value and the value which server specified.",
      "default": 4096,
      "type":"integer"
    },
    "window-bits":
    {
      "description":"Sets the stream level initial window size to (2^window-bits)-1",
      "default": 30,
      "type":"integer"
    },
    "connection-window-bits":
    {
      "description":"Sets the connection level initial window size to (2^connection-window-bits)-1",
      "default": 30,
      "type":"integer"
    },
    "socket-receive-buffer-size":{
      "description":"socket receive buffer size in bytes; default: 4M",
      "default": 4194304,
      "type":"integer"
    },
    "socket-send-buffer-size":{
      "description":"socket send buffer size in bytes; default: 4M",
      "default": 4194304,
      "type":"integer"
    },
    "certVerificationMode": {
      "description": "0: do not do certificate validation; 1: fail if peer certificate does not pass validation",
      "default": 0,
      "type": "integer"
    },
    "interval-between-ping-frames": {
      "description": "ping frame can be sent to peer host to prevent the egress connection going idle, as a long idle connection might be taken down; this field specifies the max interval (in seconds) between 2 ping frames; if the connection comes out of idle state in less than this interval, next ping frame will not be sent; 0: no ping is sent even the connection is idle for long",
      "default": 0,
      "type": "number"
    },
    "verbose":{
        "description": "true: print debug trace; false: no debug print",
        "default": false,
        "type":"boolean"
    }
  }
}
